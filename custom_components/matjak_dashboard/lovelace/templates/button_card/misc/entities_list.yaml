entities_list:
  variables:
    mj_entities: []
    mj_is_nested: true
    mj_layout: vertical
    mj_min_width: null

  show_icon: false
  show_name: false
  show_state: false

  tap_action:
    action: none

  styles:
    card:
      - background: "[[[ return variables.mj_is_nested ? 'var(--ha-card-background)' : 'none'; ]]]"
      - border-radius: "[[[ return variables.mj_is_nested ? 'var(--ha-card-border-radius)' : '0'; ]]]"
      - box-shadow: "[[[ return variables.mj_is_nested ? 'var(--ha-card-box-shadow)' : 'none'; ]]]"
      - padding: 0
    grid:
      - grid-template: >
          "entities" 1fr / 1fr
    custom_fields:
      entities:
        - overflow: auto
        - pointer-events: auto

  custom_fields:
    entities:
      card:
        type: custom:layout-card
        layout_type: grid
        layout:
          grid-auto-columns: >
            [[[
              if (variables.mj_min_width == null) {
                return "1fr";
              }

              return variables.mj_min_width;
            ]]]
          grid-auto-flow: "[[[ return variables.mj_layout == 'vertical' ? 'row' : 'column'; ]]]"
          grid-gap: "[[[ return variables.mj_is_nested ? '0' : 'var(--grid-gap)'; ]]]"
          grid-template-columns: >
            [[[
              if (variables.mj_layout == "vertical") {
                return "1fr";
              }

              if (variables.mj_layout == "horizontal") {
                if (variables.mj_min_width == null) {
                  return `repeat(${variables.mj_entities.length}, 1fr)`;
                }

                return `repeat(auto-fill, minmax(${variables.mj_min_width}, 1fr))`;
              }

              return "none";
            ]]]
          margin: 0
          padding: 0
        cards: >
          [[[
            const device_classes = [];
            const domains = [];
            const result = [];

            for (let i = 0; i < variables.mj_entities.length; i++) {
              const entity = typeof variables.mj_entities[i] == "string" ? { entity: variables.mj_entities[i] } : variables.mj_entities[i];
              const entity_id = entity["entity"];
              const domain = entity_id?.split(".")[0];
              const device_class = domain == "sensor" ? states[entity_id]?.attributes.device_class : null;
              const item = {
                type: "custom:button-card",
                template: device_classes.includes(device_class) ? device_class : domains.includes(domain) ? domain : "mj_entity_card",
                entity: entity_id,
                variables: {
                  mj_layout: variables.mj_layout == "horizontal" ? "vertical" : "horizontal"
                }
              };

              if (variables.mj_is_nested) {
                item["styles"] = {
                  card: [
                    {"background": "none", "border-radius": 0, "box-shadow": "none"}
                  ]
                }
              }

              if ("templates" in entity) {
                item["template"] = entity["templates"];
              }

              if ("icon" in entity) {
                item["icon"] = entity["icon"];
              }

              if ("name" in entity) {
                item["name"] = entity["name"];
              }

              result.push(item);
            }

            return result;
          ]]]